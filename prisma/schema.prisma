// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String   @db.Text
  userId      Int
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  id        String           @id @unique @default(cuid())
  userId    Int
  User      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked   Boolean          @default(false)
  createdAt DateTime         @default(now())
  type      VerificationType @default(EMAIL_VERIFICATION)

  @@index([userId])
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  role       Role     @default(USER)
  isVerified Boolean  @default(false)
  password   String   @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  collegeId  Int?
  College    College? @relation(fields: [collegeId], references: [id], onDelete: SetNull)

  VerificationToken VerificationToken[]
  RefreshTokens     RefreshToken[]
  PaymentOrders     PaymentOrder[]
  BranchRep         BranchRep?
  Organizers        Organizer[]
  TeamMembers       TeamMember[]
  Judges            Judge[]

  @@index([collegeId])
}

model College {
  id        Int      @id @default(autoincrement())
  name      String
  details   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Users     User[]
}

model Branch {
  id         Int         @id @default(autoincrement())
  name       String
  details    String?
  BranchReps BranchRep[]
  Event      Event[]
}

model Event {
  id          Int         @id @default(autoincrement())
  name        String
  description String?     @db.Text
  image       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  fees        Int         @default(0)
  eventDate   DateTime?
  Organizers  Organizer[]
  eventType   EventType   @default(INDIVIDUAL)
  venue       String?
  branchId    Int
  minTeamSize Int         @default(1)
  maxTeamSize Int         @default(1)
  maxTeams    Int?
  published   Boolean     @default(false)
  Branch      Branch      @relation(fields: [branchId], references: [id], onDelete: Restrict)
  Teams       Team[]
  Rounds      Round[]
  Winner      Winner[]

  @@index([branchId])
}

model Team {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  eventId      Int
  Event        Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  roundNo      Int          @default(1)
  confirmed    Boolean      @default(false)
  attended     Boolean      @default(false)
  TeamMembers  TeamMember[]
  roundEventId Int?
  roundRoundNo Int?
  leaderId     Int?
  Round        Round?       @relation(fields: [roundEventId, roundRoundNo], references: [eventId, roundNo])
  Winner       Winner[]

  @@index([eventId, roundNo])
  @@index([roundEventId, roundRoundNo])
}

model Round {
  eventId   Int
  roundNo   Int     @default(1)
  Event     Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  completed Boolean @default(false)
  Teams     Team[]
  Judges    Judge[]

  @@id([eventId, roundNo])
  @@unique([eventId, roundNo])
}

model PaymentOrder {
  id          String      @id @default(cuid())
  orderId     String      @unique
  status      Status      @default(PENDING)
  amount      Int         @default(250)
  paymentData Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  type        PaymentType @default(FEST_REGISTRATION)
  User        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int

  @@index([userId])
}

// n-n relations

model BranchRep {
  userId   Int    @unique
  User     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  branchId Int
  Branch   Branch @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@index([branchId, userId])
}

model Organizer {
  userId  Int
  User    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId Int
  Event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([eventId, userId])
}

model TeamMember {
  userId Int
  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId Int
  Team   Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@index([teamId, userId])
}

model Judge {
  userId  Int
  User    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId Int
  roundNo Int
  Round   Round @relation(fields: [eventId, roundNo], references: [eventId, roundNo], onDelete: Cascade)

  @@unique([userId, eventId, roundNo])
  @@index([eventId, roundNo, userId])
}

model Winner {
  id       Int      @id @default(autoincrement())
  eventId  Int
  Event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  teamId   Int
  Team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  position Position @default(FIRST)

  @@unique([teamId, eventId])
  @@index([eventId, teamId])
}

// Enums
enum PaymentType {
  FEST_REGISTRATION
  EVENT_REGISTRATION
}

enum Role {
  USER
  PARTICIPANT
  ADMIN
  BRANCH_REP
  ORGANIZER
  JUDGE
  JURY
}

enum Status {
  PENDING
  SUCCESS
  FAILED
}

enum VerificationType {
  RESET_PASSWORD
  EMAIL_VERIFICATION
}

enum EventType {
  INDIVIDUAL
  TEAM
  INDIVIDUAL_MULTIPLE_ENTRY
  TEAM_MULTIPLE_ENTRY
}

enum Position {
  FIRST
  SECOND
  THIRD
}
